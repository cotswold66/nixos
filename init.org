#+TITLE: Emacs config file in org format
#+AUTHOR: John Lord
#+PROPERTY: header-args :results silent :tangle "/home/john/.emacs.d/init.el"
#+STARTUP: overview

* Early init

Add a hook that reports how long and how many garbage collections the
startup took. The hook is run at the very end, so the message doesn't
get clobbered by other messages during startup.

#+begin_src emacs-lisp
  (add-hook
   'emacs-startup-hook
   (lambda ()
     (message
      "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
              (float-time
               (time-subtract after-init-time before-init-time)))
      gcs-done)))
#+end_src

* Package Management

Declare the package repositories.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+end_src

Initialize the package system, refresh the list of packages and
install =use-package= if needed.

#+begin_src emacs-lisp
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

Finally, load =use-package= and ensure packages are installed by
default. Later, system packages and already installed packages can
include an =:ensure nil= clause.

#+begin_src emacs-lisp
  (require 'use-package)
  (custom-set-variables '(use-package-always-ensure t)
                        '(use-package-verbose t))
#+end_src

* Global defaults and custom variables

Setup a noweb template to allow calling emacs functions and setting
emacs custom variables with =use-package= for consistency with the rest
of the config file.

#+begin_src emacs-lisp :noweb yes
  (use-package emacs
    :init
    <<emacs-init>>
    :bind
    <<emacs-bind>>
    :custom
    <<emacs-custom>>
    :config
    <<emacs-config>>)
#+end_src

Clean up the interface by removing the menu bar, tool bar, and scroll
bars. Show balanced parentheses.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-init
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (show-paren-mode)
  (electric-pair-mode)
  (delete-selection-mode 1)
#+end_src

Inhibit the startup screen and provide an empty scratch buffer.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-custom
  (inhibit-startup-screen t)
  (initial-scratch-message "")
#+end_src

Do not create backup files since files are under version control.
Also, move deleted files to system trash instead of deleting outright.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-custom
  (delete-by-moving-to-trash t)
  (make-backup-files nil)
#+end_src

Move focus to help window when help activated, which makes it easy to
close them with a 'q'.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-custom
  (help-window-select t)
#+end_src

Define a sentence as only having one space after the final
punctuation.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-custom
  (sentence-end-double-space nil)
#+end_src

Enable various non-beginner functions.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-init
  (put 'narrow-to-region 'disabled nil)
#+end_src

Change =zap-to-char= binding to =zap-up-to-char= and bind =zap-to-char= to
=M-Z=.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-bind
  ("M-z" . zap-up-to-char)
  ("M-Z" . zap-to-char)
#+end_src

Set the default font.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Inconsolata"
                    :height 130
                    :weight 'normal
                    :width 'normal)
#+end_src

* Privilege and Authentication

Install =sudo-edit= to allow for easier editing of read-only system
files. Do not provide a key-binding to reduce risk.

#+begin_src emacs-lisp
  (use-package sudo-edit
    :commands sudo-edit)
#+end_src

Configure =auth-source-pass= to provide passwords to Emacs. This
interfaces with the external =pass= program.

#+begin_src emacs-lisp
  (use-package auth-source-pass
    :defer t
    :custom
    (auth-source-debug t)
    (auth-source-do-cache nil)
    (auth-sources '(password-store))
    :init
    (auth-source-pass-enable))
#+end_src

* Themes

Enable the tomorrow night theme from the base16 collection.

#+begin_src emacs-lisp
  (use-package base16-theme
   :config
   (load-theme 'base16-tomorrow-night t))
#+end_src

* Corfu

Use =corfu= instead of company for completions.

#+begin_src emacs-lisp
  (use-package corfu
    :defer 2
    :init
    (global-corfu-mode))
#+end_src

Enable TAB cycling on completions if 3 or less candidates. Also, TAB
completes if line already indented.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-custom
  (completion-cycle-threshold 3)
  (tab-always-indent 'complete)
#+end_src

* Vertico, orderless, and marginalia

Use =vertico= to provide vertical display of completion candidates.

#+begin_src emacs-lisp
  (use-package vertico
    :defer 2
    :init
    (vertico-mode))
#+end_src

Use =orderless= to provide completion styles, including ordering.
Specifcally, allow the use of wildcard searches in file paths.

#+begin_src emacs-lisp
  (use-package orderless
    :defer t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

Use =marginalia= to provide additional details in the minibuffer like
file modes, etc.

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

* Embark

Use =embark= to provide minibuffer actions.  

#+begin_src emacs-lisp :noweb yes
  (use-package embark
    :bind
    ("C-," . embark-act)	      ;; pick some comfortable binding
    ("C-;" . embark-dwim)	      ;; good alternative: M-.
    ("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
    :config
    <<embark-config>>)
#+end_src

Hide the mode line of the Embark live/completions buffers.

#+begin_src emacs-lisp :tangle no :noweb-ref embark-config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src

* Consult

#+begin_src emacs-lisp :noweb yes
  ;; Example configuration for Consult
  (use-package consult
    :bind
    ("C-c h" . consult-history)
    ("C-c m" . consult-mode-command)
    ("C-c b" . consult-bookmark)
    ("C-c k" . consult-kmacro)
    ;; C-x bindings (ctl-x-map)
    ("C-x M-:" . consult-complex-command)	;; orig. repeat-complex-command
    ("C-x b" . consult-buffer)		;; orig. switch-to-buffer
    ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
    ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
    ;; Custom M-# bindings for fast register access
    ("M-#" . consult-register-load)
    ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
    ("C-M-#" . consult-register)
    ;; Other custom bindings
    ("M-y" . consult-yank-pop)	 ;; orig. yank-pop
    ("<help> a" . consult-apropos) ;; orig. apropos-command
    ;; M-g bindings (goto-map)
    ("M-g e" . consult-compile-error)
    ("M-g f" . consult-flymake)	  ;; Alternative: consult-flycheck
    ("M-g g" . consult-goto-line)	  ;; orig. goto-line
    ("M-g M-g" . consult-goto-line) ;; orig. goto-line
    ("M-g o" . consult-outline)	  ;; Alternative: consult-org-heading
    ("M-g m" . consult-mark)
    ("M-g k" . consult-global-mark)
    ("M-g i" . consult-imenu)
    ("M-g I" . consult-imenu-multi)
    ;; M-s bindings (search-map)
    ("M-s f" . consult-find)
    ("M-s F" . consult-locate)
    ("M-s g" . consult-grep)
    ("M-s G" . consult-git-grep)
    ("M-s r" . consult-ripgrep)
    ("M-s l" . consult-line)
    ("M-s L" . consult-line-multi)
    ("M-s m" . consult-multi-occur)
    ("M-s k" . consult-keep-lines)
    ("M-s u" . consult-focus-lines)
    ;; Isearch integration
    ("M-s e" . consult-isearch)
    (:map isearch-mode-map
          ("M-e" . consult-isearch) ;; orig. isearch-edit-string
          ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
          ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
          ("M-s L" . consult-line-multi))	;; needed by consult-line to detect isearch
    :init
    <<consult-init>>
    :custom
    <<consult-custom>>
    :config
    <<consult-config>>)
#+end_src

Optionally configure the register formatting. This improves the
register preview for =consult-register=, =consult-register-load=,
=consult-register-store= and the Emacs built-ins. Also, tweak the
register preview window. This adds thin lines, sorting and hides the
mode line of the window. Finally, replace =completing-read-multiple=
with an enhanced version.

#+begin_src emacs-lisp :tangle no :noweb-ref consult-init
  (setq register-preview-function #'consult-register-format)
  (advice-add 'register-preview
              :override #'consult-register-window)
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref consult-custom
  (register-preview-delay 0)
#+end_src

Use =consult= to select xref locations with preview.

#+begin_src emacs-lisp :tangle no :noweb-ref consult-custom
  (xref-show-xrefs-function 'consult-xref)
  (xref-show-definitions-function 'consult-xref)
#+end_src

Set the narrow key.

#+begin_src emacs-lisp :tangle no :noweb-ref consult-custom
  (consult-narrow-key "<")
#+end_src

Set =consult= to use =project= for project completions.

#+begin_src emacs-lisp :tangle no :noweb-ref consult-custom
  (consult-project-root-function
   (lambda () (when-let (project (project-current))
                (car (project-roots project)))))
#+end_src

Use =consult-completion-in-region= if =vertico= is enabled. Otherwise use
the default =completion--in-region= function.

#+begin_src emacs-lisp :tangle no :noweb-ref config
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
#+end_src

Use =consult-dir= for easy switching of directories and projects.

#+begin_src emacs-lisp
  (use-package consult-dir
    :ensure t
    :bind (("C-x C-d" . consult-dir)
           :map minibuffer-local-completion-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :custom
    (consult-dir-project-list-function 'consult-dir-project-dirs))
#+end_src

Use the =embark-consult= package.

#+begin_src emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :demand t
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Savehist and which-key

Remember search histories between sessions with =savehist=.

#+begin_src emacs-lisp :tangle no :noweb-ref emacs-init
  (savehist-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package recentf
    :init
    (recentf-mode)
    :custom
    (recentf-max-saved-items 50))
#+end_src

Enable key completions with =which-key=.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 3
    :init
    (which-key-mode))
#+end_src

* Org

In order to use the latest version, start emacs with =emacs -q= and then
install org for the ="M-x list-packages"= menu.

#+begin_src emacs-lisp :noweb yes
  (use-package org
    :bind 
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    :mode ("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)
    :hook (org-mode . auto-fill-mode)
    :config
    <<org-config>>
    :custom
    <<org-custom>>)
#+end_src

Ensure that sparse regex and tag searches show entry details and not
just the headings. This is very handy for browsing journal entries in
a multipurpose file.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (add-to-list 'org-show-context-detail '(occur-tree . local))
  (add-to-list 'org-show-context-detail '(tags-tree . local))
#+end_src

Define the default org directory.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-directory "~/org")
#+end_src

Define the sequence of org todo keywords. Those before the ="|"= are
todo items and those after are done items.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "SOMETIME(s)" "|"
               "DONE(d)" "CANCELLED(c)")))
#+end_src

When a task is marked as done, place the time of completion in a log
drawer.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-log-done 'time)
  (org-log-into-drawer t)
#+end_src

Improve the visual style of org buffers by indenting and hiding
emphasis markers.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-hide-emphasis-markers t)
  ;; (org-startup-indented t)
#+end_src

Make latex greek letters and sub and superscripts show visually.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts t)
#+end_src

Define the files used to create the agenda. For formatting, prefer to
have a compact view which removes extra lines. Add a custom agenda
view which splits todos into the sub-todo headings, e.g. "TODO",
"NEXT", etc.. Load the agenda into the current window, which prevents
agenda messing up window layout. Finally, ensure that todos with
scheduled or deadlined timestamps are not included in the sub-todo
lists as they are already included in the calendar view.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-agenda-files
   '("~/org/companies.org"
     "~/org/journal.org"
     "~/org/todo.org"
     "~/org/contacts.org"))
  (org-agenda-compact-blocks t)
  (org-agenda-custom-commands
   '(("h" "Agenda and home tasks"
      ((agenda "")
       (todo "NEXT" ((org-agenda-overriding-header "Next")))
       (todo "TODO" ((org-agenda-overriding-header "Todo")))
       (todo "WAITING" ((org-agenda-overriding-header "Waiting")))
       (todo "SOMETIME" ((org-agenda-overriding-header "Sometime")))))))
  (org-agenda-window-setup 'current-window)
  (org-agenda-todo-ignore-scheduled 'all)
  (org-agenda-todo-ignore-deadlines 'all)
#+end_src

Define refile targets and how outline paths are displayed.
Specifically, allow all paths to be visualized since we use completion
to narrow down the options.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-outline-path-complete-in-steps nil)
  (org-refile-targets '(("~/org/journal.org" . (:maxlevel . 3))
			("~/org/companies.org" . (:maxlevel . 3))
			("~/org/todo.org" . (:maxlevel . 3))))
  (org-refile-use-outline-path t)
#+end_src

Define various capture templates. The list starts with =`(= instead of
='(= which enables the inclusion of the =concat= function (the =concat= list
also needs to be proceeded by a comma) for improved template
visualization in the code.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-capture-templates
   `(("f"
      "fleeting note"
      entry 
      (file+olp+datetree "~/org/journal.org")
      ,(concat "* %? :fleeting:\n"
               ":PROPERTIES:\n"
               ":CREATED:  %(format-time-string \"%Y-%m-%dT%H:%M:%S\")\n"
               ":END:\n")
      :unnarrowed t
      :time-prompt t)
     ("j"
      "journal"
      entry 
      (file+olp+datetree "~/org/journal.org")
      ,(concat "* Journal :journal:\n"
               ":PROPERTIES:\n"
               ":CREATED:  %(format-time-string \"%Y-%m-%dT%H:%M:%S\")\n"
               ":END:\n"
               "%?")
      :unnarrowed t)
     ("m"
      "meeting"
      entry 
      (file+olp+datetree "~/org/journal.org")
      ,(concat "* %? :meeting:\n"
               ":PROPERTIES:\n"
               ":CREATED:  %(format-time-string \"%Y-%m-%dT%H:%M:%S\")\n"
               ":END:\n"
               ":DETAILS:\n"
               "- date :: %T\n"
               "- attendee :: John Lord\n"
               "- company :: \n"
               "- attendee :: \n"
               "- agenda :: \n"
               ":END:\n"
               "- ")
      :unnarrowed t
      :time-prompt t)
     ("t"
      "task"
      entry
      (file+olp+datetree "~/org/journal.org")
      ,(concat "* %?  :task:\n"
               ":PROPERTIES:\n"
               ":CREATED:  %(format-time-string \"%Y-%m-%dT%H:%M:%S\")\n"
               ":SOURCE:   %a\n"
               ":END:\n")
      :unnarrowed t)
     ("d"
      "todo"
      entry
      (file "~/org/todo.org")
      ,(concat "* TODO %?\n"
               ":PROPERTIES:\n"
               ":CREATED:  %(format-time-string \"%Y-%m-%dT%H:%M:%S\")\n"
               ":SOURCE:   %a\n"
               ":END:\n")
      :unnarrowed t)))
#+end_src

Do not round timestamps.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-time-stamp-rounding-minutes '(0 1))
#+end_src

Set some standard tags.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-tag-alist '(("@work" . ?w)
                   ("@home" . ?h)))
#+end_src

Load org code block language support.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (latex . t)
     ;; (python .t)
     (shell .t)
     (org . t)
     ))
#+end_src

Do not ask for confirmation before executing code.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-confirm-babel-evaluate nil)
#+end_src

* Org roam

#+begin_src emacs-lisp :noweb yes
  (use-package org-roam
    ;; :after org
    :custom
    (org-roam-directory (file-truename "~/org"))
    (org-roam-capture-templates
     `(("d" "default" plain "%?" 
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
        :unnarrowed t)
       ("a" "article" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${citekey}.org"
                           ,(concat "#+title: ${title}\n"
                                    "#+filetags: :source:\n"
                                    "- author :: ${author-or-editor}\n"
                                    "- journal :: ${journal}\n"
                                    "- year :: ${year}\n"
                                    "- doi :: ${doi}\n\n"))
        :unnarrowed t)
       ("c" "company" plain "%?" 
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           ,(concat "#+title: ${title}\n"
                                    "#+filetags: :company:\n"))
        :unnarrowed t)
       ("p" "person" plain "%?" 
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           ,(concat "#+title: ${title}\n"
                                    "#+filetags: :person:\n"
                                    "- company :: \n"
                                    "- dob :: \n"
                                    "- interest :: \n"))
        :unnarrowed t)))
    (org-roam-capture-ref-templates
     `(("r" "ref" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           ,(concat "#+title: ${title}\n"
                                    "#+filetags: :source:\n"
                                    "- author :: ${author-or-editor}\n"
                                    "- journal :: ${journal}\n"
                                    "- year :: ${year}\n\n"))
        :unnarrowed t)))
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n g" . org-roam-graph)
    ("C-c n i" . org-roam-node-insert)
    ("C-c n c" . org-roam-capture)
    ("C-c n o" . org-id-get-create)
    ("C-c n t" . org-roam-tag-add)
    ("C-c n r" . org-roam-ref-add)
    :hook
    (org-roam-mode . visual-line-mode)
    (org-capture-mode . org-align-all-tags)
    :init
    (setq org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    <<org-roam-config>>
    (require 'org-roam-protocol)
    ;; (add-to-list 'display-buffer-alist
    ;;              '("\\*org-roam\\*"
    ;;                (display-buffer-in-direction)
    ;;                (direction . right)
    ;;                (window-width . 0.33)
    ;;                (window-height . fit-window-to-buffer)))
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-side-window)
                   (side . right)
                   (slot . 0)
                   (window-width . 0.33)
                   (window-parameters . ((no-other-window . t)
                                         (no-delete-other-windows . t))))))
#+end_src

The following function was borrowed online and adds a CREATED date
property to new org roam nodes created at the file level.

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
  (defun bms/add-other-auto-props-to-org-roam-properties (&optional ARG PRED)
    (unless (org-find-property "CREATED")
      (org-roam-add-property
       (format-time-string "%Y-%m-%dT%H:%M:%S")
       "CREATED")))	
  (add-hook 'org-roam-capture-new-node-hook 'bms/add-other-auto-props-to-org-roam-properties)
#+end_src

The following function was modified from the above and adds a CREATED
date property to new org roam nodes created at the heading level.

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
  (defun jdl/add-other-auto-props-to-org-roam-properties (&optional ARG PRED)
    (unless (org--property-local-values "CREATED" nil)
      (org-roam-add-property
       (format-time-string "%Y-%m-%dT%H:%M:%S")
       "CREATED")))	
  (advice-add  'org-id-get-create :before 'jdl/add-other-auto-props-to-org-roam-properties)
#+end_src
* Mu4e
** Mu4e
#+begin_src emacs-lisp :noweb yes
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :commands mu4e
    :hook
    (mu4e-view-mode-hook . visual-line-mode)
    :custom
    <<mu4e-custom-vars>>
    :config
    <<mu4e-config>>)
#+END_SRC

** Mu4e custom set variables

#+begin_src emacs-lisp :tangle no :noweb-ref mu4e-custom-vars
  (mail-user-agent 'mu4e-user-agent)
  (message-kill-buffer-on-exit t)
  (mu4e-change-filenames-when-moving t)
  (mu4e-completing-read-function 'completing-read)
  (mu4e-attachment-dir "~/downloads")
  (mu4e-enable-mode-line t)
  (mu4e-flowed-encode-column 998)
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-headers-date-format "%Y-%m-%d")
  (mu4e-headers-auto-update t)
  (mu4e-headers-fields
   '((:human-date . 12)
     (:flags . 6)
     (:mailing-list . 10)
     (:from-or-to . 22)
     (:subject)))
  (mu4e-maildir-shortcuts
   '((:maildir "/archive" :key ?a)
     (:maildir "/org.lordsonline.john" :key ?p)
     (:maildir "/com.lordpharmaconsulting.john" :key ?b)))
  (mu4e-org-link-query-in-headers-mode nil)
  (mu4e-update-interval 180)
  (mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
  (mu4e-view-show-images t)
  (shr-color-visible-distance-min 5)
  (shr-color-visible-luminance-min 60)
  (shr-use-colors nil)
#+end_src

** Org msg
#+name: org-msg
#+begin_src emacs-lisp :tangle no
  (use-package org-msg
    :after mu4e 
    :config
    (setq
     org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
     org-msg-startup "hidestars indent inlineimages"
     org-msg-greeting-fmt "\nHi %s,\n\n"
     org-msg-recipient-names '(("john@lordsonline.org" . "John Lord"))
     org-msg-greeting-name-limit 3
     org-msg-default-alternatives '(text html)
     org-msg-convert-citation t)
    (org-msg-mode))
#+end_src

* Reference management
** Org cite

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (bibtex-dialect 'biblatex)
    (org-cite-global-bibliography '("~/git/bibliography/references.bib")))
#+end_src

** org-ref

#+begin_src emacs-lisp :tangle no
  (use-package org-ref
    :after org)
#+end_src

** Consult bibtex

#+begin_src emacs-lisp
  (use-package consult-bibtex
    :load-path ("~/.emacs.d/site-lisp/consult-bibtex")
    :bind ("C-c n b" . consult-bibtex)
    :config
    (org-roam-bibtex-mode)
    :custom
    (bibtex-completion-pdf-field "file")
    (bibtex-completion-bibliography "~/git/bibliography/references.bib"))
#+end_src

Ensure that =bibtex-completion= uses the =consult-bibtex= keymap. This
provides a good replacement for =helm-bibtex=.

#+begin_src emacs-lisp :tangle no :noweb-ref embark-config
  (add-to-list 'embark-keymap-alist
               '(bibtex-completion . consult-bibtex-embark-map))
#+end_src

** org-roam-bibtex

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam
    :custom
    (orb-preformat-keywords
     '("citekey" "title" "url" "file" "author-or-editor"
       "keywords" "doi" "date" "year" "journal" "journaltitle"))
    :hook
    (org-roam-mode . org-roam-bibtex-mode)
    :bind
    (:map org-mode-map
          ("C-c n a" . orb-note-actions)))
#+end_src

* Tex
#+name: auctex
#+begin_src emacs-lisp
    (use-package auctex
      :defer t
      :custom
      (TeX-engine 'luatex)
      (ConTeXt-Mark-version "IV") 
      :config
      (setq TeX-auto-save t
	    TeX-parse-self t)
      (setq TeX-view-program-list
      '(("zathura" 
	 ("zathura" (mode-io-correlate "-sync.sh")
	  " "
	  (mode-io-correlate "%n:1:%t ")
	  "%o")))))
	  
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package cdlatex
    :hook (org-mode . turn-on-org-cdlatex))  
#+end_src

#+begin_src emacs-lisp
; for outline views (hide/show sections, chapters, etc.)
(add-hook 'TeX-mode-hook '(lambda () (TeX-fold-mode 1)))
(add-hook 'TeX-mode-hook '(lambda () (outline-minor-mode 1)))
; make PDF by default (can toggle with C-c C-t C-p
(add-hook 'TeX-mode-hook '(lambda () (TeX-PDF-mode 1)))
; these math abbrevs (` as prefix char) are also useful in TeX/ConTeXt files
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package mmm-mode
    :custom-face
    (mmm-code-submode-face ((t (:background "white")))))

  (setq mmm-global-mode 'maybe)
  (setq mmm-submode-decoration-level 2)
  (mmm-add-group 'context-plus
		 '((context-R
		    :submode r-mode
		    :face mmm-comment-submode-face
		    :front ".*\\\\startR\\w*\\({\\w*}\\|\\[\\w*\\]\\|\\)\\W*"
		    :back  ".*\\\\stopR")
		   (context-MP
		    :submode metapost-mode
		    :face mmm-code-submode-face
		    :front ".*\\\\start\\w*MP\\w*\\({\\w*}\\|\\[\\w*\\]\\|\\)\\W*"
		    :back  ".*\\\\stop\\w*MP")
		   ))
  (add-to-list 'mmm-mode-ext-classes-alist '(context-mode nil context-plus))
#+end_src

* Dired
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
  (use-package dired
    :defer t
    :ensure nil
    :custom
    (dired-listing-switches "-alh -v --group-directories-first")
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-recursive-copies  'always)
    (dired-recursive-deletes 'top)
    (dired-create-destination-dirs 'ask)
    (image-dired-thumb-size 150))
#+end_src

Use =peep-dired= to show dired file previews.

#+begin_src emacs-lisp
  (use-package peep-dired
    :commands 'peep-dired
    :custom
    (peep-dired-cleanup-on-disable t)
#+end_src

Use =dired-rsync= for rsync functionality in dired mode.

#+begin_src emacs-lisp
  (use-package dired-rsync
    :bind
    (:map dired-mode-map
          ("C-c C-r" . dired-rsync))) 
#+end_src
* Python
#+name: python
#+begin_src emacs-lisp :tangle no
  (use-package elpy
    :init
    (elpy-enable)
    :config
    (setq python-indent-offset 4)
    (setenv "WORKON_HOME" "~/src")
    (setq python-shell-interpreter "jupyter"
          python-shell-interpreter-args "console --simple-prompt"
          python-shell-prompt-detect-failure-warning nil)
    (add-to-list 'python-shell-completion-native-disabled-interpreters
                 "jupyter"))
#+end_src

#+name: ein
#+begin_src emacs-lisp :tangle no
  (use-package ein
    :ensure t) 
#+end_src

* Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

